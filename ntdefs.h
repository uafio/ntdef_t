/*
 * File generated via ntdef_t project https://github.com/uafio/ntdef_t
 * 
 * MIT License
 * 
 * Copyright (c) 2020 uafio
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#pragma once


typedef NTSTATUS(NTAPI* NtAcceptConnectPort_t)( PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView );
typedef NTSTATUS(NTAPI* NtAccessCheck_t)( PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus );
typedef NTSTATUS(NTAPI* NtAccessCheckAndAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtAccessCheckByType_t)( PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus );
typedef NTSTATUS(NTAPI* NtAccessCheckByTypeAndAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtAccessCheckByTypeResultList_t)( PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus );
typedef NTSTATUS(NTAPI* NtAccessCheckByTypeResultListAndAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtAccessCheckByTypeResultListAndAuditAlarmByHandle_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtAddAtom_t)( PWSTR AtomName, ULONG Length, PRTL_ATOM Atom );
typedef NTSTATUS(NTAPI* NtAddAtomEx_t)( PWSTR AtomName, ULONG Length, PRTL_ATOM Atom, ULONG Flags );
typedef NTSTATUS(NTAPI* NtAddBootEntry_t)( PBOOT_ENTRY BootEntry, PULONG Id );
typedef NTSTATUS(NTAPI* NtAddDriverEntry_t)( PEFI_DRIVER_ENTRY DriverEntry, PULONG Id );
typedef NTSTATUS(NTAPI* NtAdjustGroupsToken_t)( HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtAdjustPrivilegesToken_t)( HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtAdjustTokenClaimsAndDeviceGroups_t)( HANDLE TokenHandle, BOOLEAN UserResetToDefault, BOOLEAN DeviceResetToDefault, BOOLEAN DeviceGroupsResetToDefault, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState, PTOKEN_GROUPS NewDeviceGroupsState, ULONG UserBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState, ULONG DeviceBufferLength, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState, ULONG DeviceGroupsBufferLength, PTOKEN_GROUPS PreviousDeviceGroups, PULONG UserReturnLength, PULONG DeviceReturnLength, PULONG DeviceGroupsReturnBufferLength );
typedef NTSTATUS(NTAPI* NtAlertResumeThread_t)( HANDLE ThreadHandle, PULONG PreviousSuspendCount );
typedef NTSTATUS(NTAPI* NtAlertThread_t)( HANDLE ThreadHandle );
typedef NTSTATUS(NTAPI* NtAlertThreadByThreadId_t)( HANDLE ThreadId );
typedef NTSTATUS(NTAPI* NtAllocateLocallyUniqueId_t)( PLUID Luid );
typedef NTSTATUS(NTAPI* NtAllocateReserveObject_t)( PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type );
typedef NTSTATUS(NTAPI* NtAllocateUserPhysicalPages_t)( HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray );
typedef NTSTATUS(NTAPI* NtAllocateUuids_t)( PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed );
typedef NTSTATUS(NTAPI* NtAllocateVirtualMemory_t)( HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect );
typedef NTSTATUS(NTAPI* NtAlpcAcceptConnectPort_t)( PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection );
typedef NTSTATUS(NTAPI* NtAlpcCancelMessage_t)( HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext );
typedef NTSTATUS(NTAPI* NtAlpcConnectPort_t)( PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtAlpcConnectPortEx_t)( PHANDLE PortHandle, POBJECT_ATTRIBUTES ConnectionPortObjectAttributes, POBJECT_ATTRIBUTES ClientPortObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSECURITY_DESCRIPTOR ServerSecurityRequirements, PPORT_MESSAGE ConnectionMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtAlpcCreatePort_t)( PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes );
typedef NTSTATUS(NTAPI* NtAlpcCreatePortSection_t)( HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize );
typedef NTSTATUS(NTAPI* NtAlpcCreateResourceReserve_t)( HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId );
typedef NTSTATUS(NTAPI* NtAlpcCreateSectionView_t)( HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes );
typedef NTSTATUS(NTAPI* NtAlpcCreateSecurityContext_t)( HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute );
typedef NTSTATUS(NTAPI* NtAlpcDeletePortSection_t)( HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle );
typedef NTSTATUS(NTAPI* NtAlpcDeleteResourceReserve_t)( HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId );
typedef NTSTATUS(NTAPI* NtAlpcDeleteSectionView_t)( HANDLE PortHandle, ULONG Flags, PVOID ViewBase );
typedef NTSTATUS(NTAPI* NtAlpcDeleteSecurityContext_t)( HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle );
typedef NTSTATUS(NTAPI* NtAlpcDisconnectPort_t)( HANDLE PortHandle, ULONG Flags );
typedef NTSTATUS(NTAPI* NtAlpcImpersonateClientContainerOfPort_t)( HANDLE PortHandle, PPORT_MESSAGE Message, ULONG Flags );
typedef NTSTATUS(NTAPI* NtAlpcImpersonateClientOfPort_t)( HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags );
typedef NTSTATUS(NTAPI* NtAlpcOpenSenderProcess_t)( PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtAlpcOpenSenderThread_t)( PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtAlpcQueryInformation_t)( HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtAlpcQueryInformationMessage_t)( HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtAlpcRevokeSecurityContext_t)( HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle );
typedef NTSTATUS(NTAPI* NtAlpcSendWaitReceivePort_t)( HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtAlpcSetInformation_t)( HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length );
typedef NTSTATUS(NTAPI* NtAreMappedFilesTheSame_t)( PVOID File1MappedAsAnImage, PVOID File2MappedAsFile );
typedef NTSTATUS(NTAPI* NtAssignProcessToJobObject_t)( HANDLE JobHandle, HANDLE ProcessHandle );
typedef NTSTATUS(NTAPI* NtAssociateWaitCompletionPacket_t)( HANDLE WaitCompletionPacketHandle, HANDLE IoCompletionHandle, HANDLE TargetObjectHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation, PBOOLEAN AlreadySignaled );
typedef NTSTATUS(NTAPI* NtCallEnclave_t)( PENCLAVE_ROUTINE Routine, PVOID Parameter, BOOLEAN WaitForThread, PVOID *ReturnValue );
typedef NTSTATUS(NTAPI* NtCallbackReturn_t)( PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status );
typedef NTSTATUS(NTAPI* NtCancelIoFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock );
typedef NTSTATUS(NTAPI* NtCancelIoFileEx_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock );
typedef NTSTATUS(NTAPI* NtCancelSynchronousIoFile_t)( HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock );
typedef NTSTATUS(NTAPI* NtCancelTimer_t)( HANDLE TimerHandle, PBOOLEAN CurrentState );
typedef NTSTATUS(NTAPI* NtCancelTimer2_t)( HANDLE TimerHandle, PT2_CANCEL_PARAMETERS Parameters );
typedef NTSTATUS(NTAPI* NtCancelWaitCompletionPacket_t)( HANDLE WaitCompletionPacketHandle, BOOLEAN RemoveSignaledPacket );
typedef NTSTATUS(NTAPI* NtClearEvent_t)( HANDLE EventHandle );
typedef NTSTATUS(NTAPI* NtClose_t)( HANDLE Handle );
typedef NTSTATUS(NTAPI* NtCloseObjectAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtCommitComplete_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtCommitEnlistment_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtCommitTransaction_t)( HANDLE TransactionHandle, BOOLEAN Wait );
typedef NTSTATUS(NTAPI* NtCompactKeys_t)( ULONG Count, HANDLE KeyArray[] );
typedef NTSTATUS(NTAPI* NtCompareObjects_t)( HANDLE FirstObjectHandle, HANDLE SecondObjectHandle );
typedef NTSTATUS(NTAPI* NtCompareTokens_t)( HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal );
typedef NTSTATUS(NTAPI* NtCompleteConnectPort_t)( HANDLE PortHandle );
typedef NTSTATUS(NTAPI* NtCompressKey_t)( HANDLE Key );
typedef NTSTATUS(NTAPI* NtConnectPort_t)( PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength );
typedef NTSTATUS(NTAPI* NtContinue_t)( PCONTEXT ContextRecord, BOOLEAN TestAlert );
typedef NTSTATUS(NTAPI* NtCreateDebugObject_t)( PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags );
typedef NTSTATUS(NTAPI* NtCreateDirectoryObject_t)( PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtCreateDirectoryObjectEx_t)( PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ShadowDirectoryHandle, ULONG Flags );
typedef NTSTATUS(NTAPI* NtCreateEnclave_t)( HANDLE ProcessHandle, PVOID* BaseAddress, ULONG_PTR ZeroBits, SIZE_T Size, SIZE_T InitialCommitment, ULONG EnclaveType, PVOID EnclaveInformation, ULONG EnclaveInformationLength, PULONG EnclaveError );
typedef NTSTATUS(NTAPI* NtCreateEnlistment_t)( PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey );
typedef NTSTATUS(NTAPI* NtCreateEvent_t)( PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState );
typedef NTSTATUS(NTAPI* NtCreateEventPair_t)( PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtCreateFile_t)( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength );
typedef NTSTATUS(NTAPI* NtCreateIRTimer_t)( PHANDLE TimerHandle, ACCESS_MASK DesiredAccess );
typedef NTSTATUS(NTAPI* NtCreateIoCompletion_t)( PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count );
typedef NTSTATUS(NTAPI* NtCreateJobObject_t)( PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtCreateJobSet_t)( ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags );
typedef NTSTATUS(NTAPI* NtCreateKey_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition );
typedef NTSTATUS(NTAPI* NtCreateKeyTransacted_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition );
typedef NTSTATUS(NTAPI* NtCreateKeyedEvent_t)( PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags );
typedef NTSTATUS(NTAPI* NtCreateLowBoxToken_t)( PHANDLE TokenHandle, HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PSID PackageSid, ULONG CapabilityCount, PSID_AND_ATTRIBUTES Capabilities, ULONG HandleCount, HANDLE *Handles );
typedef NTSTATUS(NTAPI* NtCreateMailslotFile_t)( PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout );
typedef NTSTATUS(NTAPI* NtCreateMutant_t)( PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner );
typedef NTSTATUS(NTAPI* NtCreateNamedPipeFile_t)( PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout );
typedef NTSTATUS(NTAPI* NtCreatePagingFile_t)( PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority );
typedef NTSTATUS(NTAPI* NtCreatePartition_t)( PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG PreferredNode );
typedef NTSTATUS(NTAPI* NtCreatePort_t)( PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage );
typedef NTSTATUS(NTAPI* NtCreatePrivateNamespace_t)( PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor );
typedef NTSTATUS(NTAPI* NtCreateProcess_t)( PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort );
typedef NTSTATUS(NTAPI* NtCreateProcessEx_t)( PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel );
typedef NTSTATUS(NTAPI* NtCreateProfile_t)( PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity );
typedef NTSTATUS(NTAPI* NtCreateProfileEx_t)( PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, USHORT GroupCount, PGROUP_AFFINITY GroupAffinity );
typedef NTSTATUS(NTAPI* NtCreateResourceManager_t)( PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description );
typedef NTSTATUS(NTAPI* NtCreateSection_t)( PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle );
typedef NTSTATUS(NTAPI* NtCreateSectionEx_t)( PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParameterCount );
typedef NTSTATUS(NTAPI* NtCreateSemaphore_t)( PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount );
typedef NTSTATUS(NTAPI* NtCreateSymbolicLinkObject_t)( PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget );
typedef NTSTATUS(NTAPI* NtCreateThread_t)( PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended );
typedef NTSTATUS(NTAPI* NtCreateThreadEx_t)( PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, SIZE_T ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList );
typedef NTSTATUS(NTAPI* NtCreateTimer_t)( PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType );
typedef NTSTATUS(NTAPI* NtCreateTimer2_t)( PHANDLE TimerHandle, PVOID Reserved1, PVOID Reserved2, ULONG Attributes, ACCESS_MASK DesiredAccess );
typedef NTSTATUS(NTAPI* NtCreateToken_t)( PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource );
typedef NTSTATUS(NTAPI* NtCreateTokenEx_t)( PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes, PTOKEN_GROUPS DeviceGroups, PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource );
typedef NTSTATUS(NTAPI* NtCreateTransaction_t)( PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description );
typedef NTSTATUS(NTAPI* NtCreateTransactionManager_t)( PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength );
typedef NTSTATUS(NTAPI* NtCreateUserProcess_t)( PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PVOID ProcessParameters, PPS_CREATE_INFO CreateInfo, PPS_ATTRIBUTE_LIST AttributeList );
typedef NTSTATUS(NTAPI* NtCreateWaitCompletionPacket_t)( PHANDLE WaitCompletionPacketHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtCreateWaitablePort_t)( PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage );
typedef NTSTATUS(NTAPI* NtCreateWnfStateName_t)( PWNF_STATE_NAME StateName, WNF_STATE_NAME_LIFETIME NameLifetime, WNF_DATA_SCOPE DataScope, BOOLEAN PersistData, PCWNF_TYPE_ID TypeId, ULONG MaximumStateSize, PSECURITY_DESCRIPTOR SecurityDescriptor );
typedef NTSTATUS(NTAPI* NtCreateWorkerFactory_t)( PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit );
typedef NTSTATUS(NTAPI* NtDebugActiveProcess_t)( HANDLE ProcessHandle, HANDLE DebugObjectHandle );
typedef NTSTATUS(NTAPI* NtDebugContinue_t)( HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus );
typedef NTSTATUS(NTAPI* NtDelayExecution_t)( BOOLEAN Alertable, PLARGE_INTEGER DelayInterval );
typedef NTSTATUS(NTAPI* NtDeleteAtom_t)( RTL_ATOM Atom );
typedef NTSTATUS(NTAPI* NtDeleteBootEntry_t)( ULONG Id );
typedef NTSTATUS(NTAPI* NtDeleteDriverEntry_t)( ULONG Id );
typedef NTSTATUS(NTAPI* NtDeleteFile_t)( POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtDeleteKey_t)( HANDLE KeyHandle );
typedef NTSTATUS(NTAPI* NtDeleteObjectAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtDeletePrivateNamespace_t)( HANDLE NamespaceHandle );
typedef NTSTATUS(NTAPI* NtDeleteValueKey_t)( HANDLE KeyHandle, PUNICODE_STRING ValueName );
typedef NTSTATUS(NTAPI* NtDeleteWnfStateData_t)( PCWNF_STATE_NAME StateName, VOID *ExplicitScope );
typedef NTSTATUS(NTAPI* NtDeleteWnfStateName_t)( PCWNF_STATE_NAME StateName );
typedef NTSTATUS(NTAPI* NtDeviceIoControlFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength );
typedef NTSTATUS(NTAPI* NtDisableLastKnownGood_t)( VOID );
typedef NTSTATUS(NTAPI* NtDisplayString_t)( PUNICODE_STRING String );
typedef NTSTATUS(NTAPI* NtDrawText_t)( PUNICODE_STRING Text );
typedef NTSTATUS(NTAPI* NtDuplicateObject_t)( HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options );
typedef NTSTATUS(NTAPI* NtDuplicateToken_t)( HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle );
typedef NTSTATUS(NTAPI* NtEnableLastKnownGood_t)( VOID );
typedef NTSTATUS(NTAPI* NtEnumerateBootEntries_t)( PVOID Buffer, PULONG BufferLength );
typedef NTSTATUS(NTAPI* NtEnumerateDriverEntries_t)( PVOID Buffer, PULONG BufferLength );
typedef NTSTATUS(NTAPI* NtEnumerateKey_t)( HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength );
typedef NTSTATUS(NTAPI* NtEnumerateSystemEnvironmentValuesEx_t)( ULONG InformationClass, PVOID Buffer, PULONG BufferLength );
typedef NTSTATUS(NTAPI* NtEnumerateTransactionObject_t)( HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtEnumerateValueKey_t)( HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength );
typedef NTSTATUS(NTAPI* NtExtendSection_t)( HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize );
typedef NTSTATUS(NTAPI* NtFilterBootOption_t)( FILTER_BOOT_OPTION_OPERATION FilterOperation, ULONG ObjectType, ULONG ElementType, PVOID Data, ULONG DataSize );
typedef NTSTATUS(NTAPI* NtFilterToken_t)( HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle );
typedef NTSTATUS(NTAPI* NtFilterTokenEx_t)( HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, ULONG DisableUserClaimsCount, PUNICODE_STRING UserClaimsToDisable, ULONG DisableDeviceClaimsCount, PUNICODE_STRING DeviceClaimsToDisable, PTOKEN_GROUPS DeviceGroupsToDisable, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes, PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes, PTOKEN_GROUPS RestrictedDeviceGroups, PHANDLE NewTokenHandle );
typedef NTSTATUS(NTAPI* NtFindAtom_t)( PWSTR AtomName, ULONG Length, PRTL_ATOM Atom );
typedef NTSTATUS(NTAPI* NtFlushBuffersFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock );
typedef NTSTATUS(NTAPI* NtFlushBuffersFileEx_t)( HANDLE FileHandle, ULONG Flags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock );
typedef NTSTATUS(NTAPI* NtFlushInstallUILanguage_t)( LANGID InstallUILanguage, ULONG SetComittedFlag );
typedef NTSTATUS(NTAPI* NtFlushInstructionCache_t)( HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length );
typedef NTSTATUS(NTAPI* NtFlushKey_t)( HANDLE KeyHandle );
typedef NTSTATUS(NTAPI* NtFlushProcessWriteBuffers_t)( VOID );
typedef NTSTATUS(NTAPI* NtFlushWriteBuffer_t)( VOID );
typedef NTSTATUS(NTAPI* NtFreeUserPhysicalPages_t)( HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray );
typedef NTSTATUS(NTAPI* NtFreeVirtualMemory_t)( HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType );
typedef NTSTATUS(NTAPI* NtFreezeRegistry_t)( ULONG TimeOutInSeconds );
typedef NTSTATUS(NTAPI* NtFreezeTransactions_t)( PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout );
typedef NTSTATUS(NTAPI* NtFsControlFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength );
typedef NTSTATUS(NTAPI* NtGetCachedSigningLevel_t)( HANDLE File, PULONG Flags, PSE_SIGNING_LEVEL SigningLevel, PUCHAR Thumbprint, PULONG ThumbprintSize, PULONG ThumbprintAlgorithm );
typedef NTSTATUS(NTAPI* NtGetCompleteWnfStateSubscription_t)( PWNF_STATE_NAME OldDescriptorStateName, ULONG64 *OldSubscriptionId, ULONG OldDescriptorEventMask, ULONG OldDescriptorStatus, PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor, ULONG DescriptorSize );
typedef NTSTATUS(NTAPI* NtGetContextThread_t)( HANDLE ThreadHandle, PCONTEXT ThreadContext );
typedef NTSTATUS(NTAPI* NtGetCurrentProcessorNumber_t)( VOID );
typedef NTSTATUS(NTAPI* NtGetDevicePowerState_t)( HANDLE Device, PDEVICE_POWER_STATE State );
typedef NTSTATUS(NTAPI* NtGetMUIRegistryInfo_t)( ULONG Flags, PULONG DataSize, PVOID Data );
typedef NTSTATUS(NTAPI* NtGetNextProcess_t)( HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle );
typedef NTSTATUS(NTAPI* NtGetNextThread_t)( HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle );
typedef NTSTATUS(NTAPI* NtGetNlsSectionPtr_t)( ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize );
typedef NTSTATUS(NTAPI* NtGetNotificationResourceManager_t)( HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext );
typedef NTSTATUS(NTAPI* NtGetWriteWatch_t)( HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity );
typedef NTSTATUS(NTAPI* NtImpersonateAnonymousToken_t)( HANDLE ThreadHandle );
typedef NTSTATUS(NTAPI* NtImpersonateClientOfPort_t)( HANDLE PortHandle, PPORT_MESSAGE Message );
typedef NTSTATUS(NTAPI* NtImpersonateThread_t)( HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos );
typedef NTSTATUS(NTAPI* NtInitializeEnclave_t)( HANDLE ProcessHandle, PVOID BaseAddress, PVOID EnclaveInformation, ULONG EnclaveInformationLength, PULONG EnclaveError );
typedef NTSTATUS(NTAPI* NtInitializeNlsFiles_t)( PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize );
typedef NTSTATUS(NTAPI* NtInitializeRegistry_t)( USHORT BootCondition );
typedef NTSTATUS(NTAPI* NtInitiatePowerAction_t)( POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous );
typedef NTSTATUS(NTAPI* NtIsProcessInJob_t)( HANDLE ProcessHandle, HANDLE JobHandle );
typedef NTSTATUS(NTAPI* NtIsSystemResumeAutomatic_t)( VOID );
typedef NTSTATUS(NTAPI* NtIsUILanguageComitted_t)( VOID );
typedef NTSTATUS(NTAPI* NtListenPort_t)( HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest );
typedef NTSTATUS(NTAPI* NtLoadDriver_t)( PUNICODE_STRING DriverServiceName );
typedef NTSTATUS(NTAPI* NtLoadEnclaveData_t)( HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, ULONG Protect, PVOID PageInformation, ULONG PageInformationLength, PSIZE_T NumberOfBytesWritten, PULONG EnclaveError );
typedef NTSTATUS(NTAPI* NtLoadKey_t)( POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile );
typedef NTSTATUS(NTAPI* NtLoadKey2_t)( POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags );
typedef NTSTATUS(NTAPI* NtLoadKeyEx_t)( POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey, HANDLE Event, ACCESS_MASK DesiredAccess, PHANDLE RootHandle, PIO_STATUS_BLOCK IoStatus );
typedef NTSTATUS(NTAPI* NtLockFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock );
typedef NTSTATUS(NTAPI* NtLockProductActivationKeys_t)( ULONG *pPrivateVer, ULONG *pSafeMode );
typedef NTSTATUS(NTAPI* NtLockRegistryKey_t)( HANDLE KeyHandle );
typedef NTSTATUS(NTAPI* NtLockVirtualMemory_t)( HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType );
typedef NTSTATUS(NTAPI* NtMakePermanentObject_t)( HANDLE Handle );
typedef NTSTATUS(NTAPI* NtMakeTemporaryObject_t)( HANDLE Handle );
typedef NTSTATUS(NTAPI* NtManagePartition_t)( MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, PVOID PartitionInformation, ULONG PartitionInformationLength );
typedef NTSTATUS(NTAPI* NtMapCMFModule_t)( ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress );
typedef NTSTATUS(NTAPI* NtMapUserPhysicalPages_t)( PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray );
typedef NTSTATUS(NTAPI* NtMapUserPhysicalPagesScatter_t)( PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray );
typedef NTSTATUS(NTAPI* NtMapViewOfSection_t)( HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect );
typedef NTSTATUS(NTAPI* NtModifyBootEntry_t)( PBOOT_ENTRY BootEntry );
typedef NTSTATUS(NTAPI* NtModifyDriverEntry_t)( PEFI_DRIVER_ENTRY DriverEntry );
typedef NTSTATUS(NTAPI* NtNotifyChangeDirectoryFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree );
typedef NTSTATUS(NTAPI* NtNotifyChangeDirectoryFileEx_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree, DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass );
typedef NTSTATUS(NTAPI* NtNotifyChangeKey_t)( HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous );
typedef NTSTATUS(NTAPI* NtNotifyChangeMultipleKeys_t)( HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SubordinateObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous );
typedef NTSTATUS(NTAPI* NtNotifyChangeSession_t)( HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, PVOID Payload, ULONG PayloadSize );
typedef NTSTATUS(NTAPI* NtOpenDirectoryObject_t)( PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenEnlistment_t)( PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenEvent_t)( PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenEventPair_t)( PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenFile_t)( PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions );
typedef NTSTATUS(NTAPI* NtOpenIoCompletion_t)( PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenJobObject_t)( PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenKey_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenKeyEx_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions );
typedef NTSTATUS(NTAPI* NtOpenKeyTransacted_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle );
typedef NTSTATUS(NTAPI* NtOpenKeyTransactedEx_t)( PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle );
typedef NTSTATUS(NTAPI* NtOpenKeyedEvent_t)( PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenMutant_t)( PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenObjectAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose );
typedef NTSTATUS(NTAPI* NtOpenPartition_t)( PHANDLE PartitionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenPrivateNamespace_t)( PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor );
typedef NTSTATUS(NTAPI* NtOpenProcess_t)( PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId );
typedef NTSTATUS(NTAPI* NtOpenProcessToken_t)( HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle );
typedef NTSTATUS(NTAPI* NtOpenProcessTokenEx_t)( HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle );
typedef NTSTATUS(NTAPI* NtOpenResourceManager_t)( PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenSection_t)( PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenSemaphore_t)( PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenSession_t)( PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenSymbolicLinkObject_t)( PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenThread_t)( PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId );
typedef NTSTATUS(NTAPI* NtOpenThreadToken_t)( HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle );
typedef NTSTATUS(NTAPI* NtOpenThreadTokenEx_t)( HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle );
typedef NTSTATUS(NTAPI* NtOpenTimer_t)( PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes );
typedef NTSTATUS(NTAPI* NtOpenTransaction_t)( PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle );
typedef NTSTATUS(NTAPI* NtOpenTransactionManager_t)( PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions );
typedef NTSTATUS(NTAPI* NtPlugPlayControl_t)( PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength );
typedef NTSTATUS(NTAPI* NtPowerInformation_t)( POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength );
typedef NTSTATUS(NTAPI* NtPrePrepareComplete_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtPrePrepareEnlistment_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtPrepareComplete_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtPrepareEnlistment_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtPrivilegeCheck_t)( HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result );
typedef NTSTATUS(NTAPI* NtPrivilegeObjectAuditAlarm_t)( PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted );
typedef NTSTATUS(NTAPI* NtPrivilegedServiceAuditAlarm_t)( PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted );
typedef NTSTATUS(NTAPI* NtPropagationComplete_t)( HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer );
typedef NTSTATUS(NTAPI* NtPropagationFailed_t)( HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus );
typedef NTSTATUS(NTAPI* NtProtectVirtualMemory_t)( HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG NewProtect, PULONG OldProtect );
typedef NTSTATUS(NTAPI* NtPulseEvent_t)( HANDLE EventHandle, PLONG PreviousState );
typedef NTSTATUS(NTAPI* NtQueryAttributesFile_t)( POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation );
typedef NTSTATUS(NTAPI* NtQueryBootEntryOrder_t)( PULONG Ids, PULONG Count );
typedef NTSTATUS(NTAPI* NtQueryBootOptions_t)( PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength );
typedef NTSTATUS(NTAPI* NtQueryDebugFilterState_t)( ULONG ComponentId, ULONG Level );
typedef NTSTATUS(NTAPI* NtQueryDefaultLocale_t)( BOOLEAN UserProfile, PLCID DefaultLocaleId );
typedef NTSTATUS(NTAPI* NtQueryDefaultUILanguage_t)( LANGID *DefaultUILanguageId );
typedef NTSTATUS(NTAPI* NtQueryDirectoryFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan );
typedef NTSTATUS(NTAPI* NtQueryDirectoryFileEx_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG QueryFlags, PUNICODE_STRING FileName );
typedef NTSTATUS(NTAPI* NtQueryDirectoryObject_t)( HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryDriverEntryOrder_t)( PULONG Ids, PULONG Count );
typedef NTSTATUS(NTAPI* NtQueryEaFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan );
typedef NTSTATUS(NTAPI* NtQueryEvent_t)( HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryFullAttributesFile_t)( POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation );
typedef NTSTATUS(NTAPI* NtQueryInformationAtom_t)( RTL_ATOM Atom, ATOM_INFORMATION_CLASS AtomInformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationByName_t)( POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass );
typedef NTSTATUS(NTAPI* NtQueryInformationEnlistment_t)( HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass );
typedef NTSTATUS(NTAPI* NtQueryInformationJobObject_t)( HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationPort_t)( HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationProcess_t)( HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationResourceManager_t)( HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationThread_t)( HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationToken_t)( HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationTransaction_t)( HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationTransactionManager_t)( HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInformationWorkerFactory_t)( HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryInstallUILanguage_t)( LANGID *InstallUILanguageId );
typedef NTSTATUS(NTAPI* NtQueryIntervalProfile_t)( KPROFILE_SOURCE ProfileSource, PULONG Interval );
typedef NTSTATUS(NTAPI* NtQueryIoCompletion_t)( HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryKey_t)( HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength );
typedef NTSTATUS(NTAPI* NtQueryLicenseValue_t)( PUNICODE_STRING ValueName, PULONG Type, PVOID Data, ULONG DataSize, PULONG ResultDataSize );
typedef NTSTATUS(NTAPI* NtQueryMultipleValueKey_t)( HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength );
typedef NTSTATUS(NTAPI* NtQueryMutant_t)( HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryObject_t)( HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryOpenSubKeys_t)( POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount );
typedef NTSTATUS(NTAPI* NtQueryOpenSubKeysEx_t)( POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize );
typedef NTSTATUS(NTAPI* NtQueryPerformanceCounter_t)( PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency );
typedef NTSTATUS(NTAPI* NtQueryPortInformationProcess_t)( VOID );
typedef NTSTATUS(NTAPI* NtQueryQuotaInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan );
typedef NTSTATUS(NTAPI* NtQuerySection_t)( HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength );
typedef NTSTATUS(NTAPI* NtQuerySecurityAttributesToken_t)( HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQuerySecurityObject_t)( HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded );
typedef NTSTATUS(NTAPI* NtQuerySemaphore_t)( HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQuerySymbolicLinkObject_t)( HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength );
typedef NTSTATUS(NTAPI* NtQuerySystemEnvironmentValue_t)( PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength );
typedef NTSTATUS(NTAPI* NtQuerySystemEnvironmentValueEx_t)( PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes );
typedef NTSTATUS(NTAPI* NtQuerySystemInformation_t)( SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQuerySystemInformationEx_t)( SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryTimer_t)( HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryTimerResolution_t)( PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime );
typedef NTSTATUS(NTAPI* NtQueryValueKey_t)( HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength );
typedef NTSTATUS(NTAPI* NtQueryVirtualMemory_t)( HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength );
typedef NTSTATUS(NTAPI* NtQueryVolumeInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FSINFOCLASS FsInformationClass );
typedef NTSTATUS(NTAPI* NtQueryWnfStateData_t)( PCWNF_STATE_NAME StateName, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, PWNF_CHANGE_STAMP ChangeStamp, PVOID Buffer, PULONG BufferSize );
typedef NTSTATUS(NTAPI* NtQueryWnfStateNameInformation_t)( PCWNF_STATE_NAME StateName, WNF_STATE_NAME_INFORMATION NameInfoClass, VOID *ExplicitScope, PVOID InfoBuffer, ULONG InfoBufferSize );
typedef NTSTATUS(NTAPI* NtQueueApcThread_t)( HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3 );
typedef NTSTATUS(NTAPI* NtQueueApcThreadEx_t)( HANDLE ThreadHandle, HANDLE ReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3 );
typedef NTSTATUS(NTAPI* NtRaiseException_t)( PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance );
typedef NTSTATUS(NTAPI* NtRaiseHardError_t)( NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response );
typedef NTSTATUS(NTAPI* NtReadFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key );
typedef NTSTATUS(NTAPI* NtReadFileScatter_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key );
typedef NTSTATUS(NTAPI* NtReadOnlyEnlistment_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtReadRequestData_t)( HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead );
typedef NTSTATUS(NTAPI* NtReadVirtualMemory_t)( HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead );
typedef NTSTATUS(NTAPI* NtRecoverEnlistment_t)( HANDLE EnlistmentHandle, PVOID EnlistmentKey );
typedef NTSTATUS(NTAPI* NtRecoverResourceManager_t)( HANDLE ResourceManagerHandle );
typedef NTSTATUS(NTAPI* NtRecoverTransactionManager_t)( HANDLE TransactionManagerHandle );
typedef NTSTATUS(NTAPI* NtRegisterProtocolAddressInformation_t)( HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions );
typedef NTSTATUS(NTAPI* NtRegisterThreadTerminatePort_t)( HANDLE PortHandle );
typedef NTSTATUS(NTAPI* NtReleaseKeyedEvent_t)( HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtReleaseMutant_t)( HANDLE MutantHandle, PLONG PreviousCount );
typedef NTSTATUS(NTAPI* NtReleaseSemaphore_t)( HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount );
typedef NTSTATUS(NTAPI* NtReleaseWorkerFactoryWorker_t)( HANDLE WorkerFactoryHandle );
typedef NTSTATUS(NTAPI* NtRemoveIoCompletion_t)( HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtRemoveIoCompletionEx_t)( HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable );
typedef NTSTATUS(NTAPI* NtRemoveProcessDebug_t)( HANDLE ProcessHandle, HANDLE DebugObjectHandle );
typedef NTSTATUS(NTAPI* NtRenameKey_t)( HANDLE KeyHandle, PUNICODE_STRING NewName );
typedef NTSTATUS(NTAPI* NtRenameTransactionManager_t)( PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid );
typedef NTSTATUS(NTAPI* NtReplaceKey_t)( POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile );
typedef NTSTATUS(NTAPI* NtReplacePartitionUnit_t)( PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags );
typedef NTSTATUS(NTAPI* NtReplyPort_t)( HANDLE PortHandle, PPORT_MESSAGE ReplyMessage );
typedef NTSTATUS(NTAPI* NtReplyWaitReceivePort_t)( HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage );
typedef NTSTATUS(NTAPI* NtReplyWaitReceivePortEx_t)( HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtReplyWaitReplyPort_t)( HANDLE PortHandle, PPORT_MESSAGE ReplyMessage );
typedef NTSTATUS(NTAPI* NtRequestPort_t)( HANDLE PortHandle, PPORT_MESSAGE RequestMessage );
typedef NTSTATUS(NTAPI* NtRequestWaitReplyPort_t)( HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage );
typedef NTSTATUS(NTAPI* NtResetEvent_t)( HANDLE EventHandle, PLONG PreviousState );
typedef NTSTATUS(NTAPI* NtResetWriteWatch_t)( HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize );
typedef NTSTATUS(NTAPI* NtRestoreKey_t)( HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags );
typedef NTSTATUS(NTAPI* NtResumeProcess_t)( HANDLE ProcessHandle );
typedef NTSTATUS(NTAPI* NtResumeThread_t)( HANDLE ThreadHandle, PULONG PreviousSuspendCount );
typedef NTSTATUS(NTAPI* NtRevertContainerImpersonation_t)( VOID );
typedef NTSTATUS(NTAPI* NtRollbackComplete_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtRollbackEnlistment_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtRollbackTransaction_t)( HANDLE TransactionHandle, BOOLEAN Wait );
typedef NTSTATUS(NTAPI* NtRollforwardTransactionManager_t)( HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtSaveKey_t)( HANDLE KeyHandle, HANDLE FileHandle );
typedef NTSTATUS(NTAPI* NtSaveKeyEx_t)( HANDLE KeyHandle, HANDLE FileHandle, ULONG Format );
typedef NTSTATUS(NTAPI* NtSaveMergedKeys_t)( HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle );
typedef NTSTATUS(NTAPI* NtSecureConnectPort_t)( PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength );
typedef NTSTATUS(NTAPI* NtSerializeBoot_t)( VOID );
typedef NTSTATUS(NTAPI* NtSetBootEntryOrder_t)( PULONG Ids, ULONG Count );
typedef NTSTATUS(NTAPI* NtSetBootOptions_t)( PBOOT_OPTIONS BootOptions, ULONG FieldsToChange );
typedef NTSTATUS(NTAPI* NtSetCachedSigningLevel_t)( ULONG Flags, SE_SIGNING_LEVEL InputSigningLevel, PHANDLE SourceFiles, ULONG SourceFileCount, HANDLE TargetFile );
typedef NTSTATUS(NTAPI* NtSetContextThread_t)( HANDLE ThreadHandle, PCONTEXT ThreadContext );
typedef NTSTATUS(NTAPI* NtSetDebugFilterState_t)( ULONG ComponentId, ULONG Level, BOOLEAN State );
typedef NTSTATUS(NTAPI* NtSetDefaultHardErrorPort_t)( HANDLE DefaultHardErrorPort );
typedef NTSTATUS(NTAPI* NtSetDefaultLocale_t)( BOOLEAN UserProfile, LCID DefaultLocaleId );
typedef NTSTATUS(NTAPI* NtSetDefaultUILanguage_t)( LANGID DefaultUILanguageId );
typedef NTSTATUS(NTAPI* NtSetDriverEntryOrder_t)( PULONG Ids, ULONG Count );
typedef NTSTATUS(NTAPI* NtSetEaFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length );
typedef NTSTATUS(NTAPI* NtSetEvent_t)( HANDLE EventHandle, PLONG PreviousState );
typedef NTSTATUS(NTAPI* NtSetEventBoostPriority_t)( HANDLE EventHandle );
typedef NTSTATUS(NTAPI* NtSetHighEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtSetHighWaitLowEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtSetIRTimer_t)( HANDLE TimerHandle, PLARGE_INTEGER DueTime );
typedef NTSTATUS(NTAPI* NtSetInformationDebugObject_t)( HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtSetInformationEnlistment_t)( HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass );
typedef NTSTATUS(NTAPI* NtSetInformationJobObject_t)( HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationKey_t)( HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationObject_t)( HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationProcess_t)( HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationResourceManager_t)( HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationThread_t)( HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationToken_t)( HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationTransaction_t)( HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationTransactionManager_t)( HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationVirtualMemory_t)( HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength );
typedef NTSTATUS(NTAPI* NtSetInformationWorkerFactory_t)( HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength );
typedef NTSTATUS(NTAPI* NtSetIntervalProfile_t)( ULONG Interval, KPROFILE_SOURCE Source );
typedef NTSTATUS(NTAPI* NtSetIoCompletion_t)( HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation );
typedef NTSTATUS(NTAPI* NtSetIoCompletionEx_t)( HANDLE IoCompletionHandle, HANDLE IoCompletionPacketHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation );
typedef NTSTATUS(NTAPI* NtSetLdtEntries_t)( ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi );
typedef NTSTATUS(NTAPI* NtSetLowEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtSetLowWaitHighEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtSetQuotaInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length );
typedef NTSTATUS(NTAPI* NtSetSecurityObject_t)( HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor );
typedef NTSTATUS(NTAPI* NtSetSystemEnvironmentValue_t)( PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue );
typedef NTSTATUS(NTAPI* NtSetSystemEnvironmentValueEx_t)( PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes );
typedef NTSTATUS(NTAPI* NtSetSystemInformation_t)( SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength );
typedef NTSTATUS(NTAPI* NtSetSystemPowerState_t)( POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags );
typedef NTSTATUS(NTAPI* NtSetSystemTime_t)( PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime );
typedef NTSTATUS(NTAPI* NtSetThreadExecutionState_t)( EXECUTION_STATE NewFlags, EXECUTION_STATE *PreviousFlags );
typedef NTSTATUS(NTAPI* NtSetTimer_t)( HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN ResumeTimer, LONG Period, PBOOLEAN PreviousState );
typedef NTSTATUS(NTAPI* NtSetTimer2_t)( HANDLE TimerHandle, PLARGE_INTEGER DueTime, PLARGE_INTEGER Period, PT2_SET_PARAMETERS Parameters );
typedef NTSTATUS(NTAPI* NtSetTimerEx_t)( HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength );
typedef NTSTATUS(NTAPI* NtSetTimerResolution_t)( ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime );
typedef NTSTATUS(NTAPI* NtSetUuidSeed_t)( PCHAR Seed );
typedef NTSTATUS(NTAPI* NtSetValueKey_t)( HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize );
typedef NTSTATUS(NTAPI* NtSetVolumeInformationFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FSINFOCLASS FsInformationClass );
typedef NTSTATUS(NTAPI* NtSetWnfProcessNotificationEvent_t)( HANDLE NotificationEvent );
typedef NTSTATUS(NTAPI* NtShutdownSystem_t)( SHUTDOWN_ACTION Action );
typedef NTSTATUS(NTAPI* NtShutdownWorkerFactory_t)( HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount );
typedef NTSTATUS(NTAPI* NtSignalAndWaitForSingleObject_t)( HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtSinglePhaseReject_t)( HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock );
typedef NTSTATUS(NTAPI* NtStartProfile_t)( HANDLE ProfileHandle );
typedef NTSTATUS(NTAPI* NtStopProfile_t)( HANDLE ProfileHandle );
typedef NTSTATUS(NTAPI* NtSubscribeWnfStateChange_t)( PCWNF_STATE_NAME StateName, WNF_CHANGE_STAMP ChangeStamp, ULONG EventMask, PULONG64 SubscriptionId );
typedef NTSTATUS(NTAPI* NtSuspendProcess_t)( HANDLE ProcessHandle );
typedef NTSTATUS(NTAPI* NtSuspendThread_t)( HANDLE ThreadHandle, PULONG PreviousSuspendCount );
typedef NTSTATUS(NTAPI* NtSystemDebugControl_t)( SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtTerminateEnclave_t)( PVOID BaseAddress, BOOLEAN WaitForThread );
typedef NTSTATUS(NTAPI* NtTerminateJobObject_t)( HANDLE JobHandle, NTSTATUS ExitStatus );
typedef NTSTATUS(NTAPI* NtTerminateProcess_t)( HANDLE ProcessHandle, NTSTATUS ExitStatus );
typedef NTSTATUS(NTAPI* NtTerminateThread_t)( HANDLE ThreadHandle, NTSTATUS ExitStatus );
typedef NTSTATUS(NTAPI* NtTestAlert_t)( VOID );
typedef NTSTATUS(NTAPI* NtThawRegistry_t)( VOID );
typedef NTSTATUS(NTAPI* NtThawTransactions_t)( VOID );
typedef NTSTATUS(NTAPI* NtTraceControl_t)( TRACE_CONTROL_INFORMATION_CLASS TraceInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID TraceInformation, ULONG TraceInformationLength, PULONG ReturnLength );
typedef NTSTATUS(NTAPI* NtTraceEvent_t)( HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields );
typedef NTSTATUS(NTAPI* NtTranslateFilePath_t)( PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength );
typedef NTSTATUS(NTAPI* NtUmsThreadYield_t)( PVOID SchedulerParam );
typedef NTSTATUS(NTAPI* NtUnloadDriver_t)( PUNICODE_STRING DriverServiceName );
typedef NTSTATUS(NTAPI* NtUnloadKey_t)( POBJECT_ATTRIBUTES TargetKey );
typedef NTSTATUS(NTAPI* NtUnloadKey2_t)( POBJECT_ATTRIBUTES TargetKey, ULONG Flags );
typedef NTSTATUS(NTAPI* NtUnloadKeyEx_t)( POBJECT_ATTRIBUTES TargetKey, HANDLE Event );
typedef NTSTATUS(NTAPI* NtUnlockFile_t)( HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key );
typedef NTSTATUS(NTAPI* NtUnlockVirtualMemory_t)( HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType );
typedef NTSTATUS(NTAPI* NtUnmapViewOfSection_t)( HANDLE ProcessHandle, PVOID BaseAddress );
typedef NTSTATUS(NTAPI* NtUnmapViewOfSectionEx_t)( HANDLE ProcessHandle, PVOID BaseAddress, ULONG Flags );
typedef NTSTATUS(NTAPI* NtUnsubscribeWnfStateChange_t)( PCWNF_STATE_NAME StateName );
typedef NTSTATUS(NTAPI* NtUpdateWnfStateData_t)( PCWNF_STATE_NAME StateName, VOID *Buffer, ULONG Length, PCWNF_TYPE_ID TypeId, VOID *ExplicitScope, WNF_CHANGE_STAMP MatchingChangeStamp, LOGICAL CheckStamp );
typedef NTSTATUS(NTAPI* NtVdmControl_t)( VDMSERVICECLASS Service, PVOID ServiceData );
typedef NTSTATUS(NTAPI* NtWaitForAlertByThreadId_t)( PVOID Address, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtWaitForDebugEvent_t)( HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange );
typedef NTSTATUS(NTAPI* NtWaitForKeyedEvent_t)( HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtWaitForMultipleObjects_t)( ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtWaitForMultipleObjects32_t)( ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtWaitForSingleObject_t)( HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout );
typedef NTSTATUS(NTAPI* NtWaitForWorkViaWorkerFactory_t)( HANDLE WorkerFactoryHandle, _FILE_IO_COMPLETION_INFORMATION *MiniPacket );
typedef NTSTATUS(NTAPI* NtWaitHighEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtWaitLowEventPair_t)( HANDLE EventPairHandle );
typedef NTSTATUS(NTAPI* NtWorkerFactoryWorkerReady_t)( HANDLE WorkerFactoryHandle );
typedef NTSTATUS(NTAPI* NtWriteFile_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key );
typedef NTSTATUS(NTAPI* NtWriteFileGather_t)( HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key );
typedef NTSTATUS(NTAPI* NtWriteRequestData_t)( HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten );
typedef NTSTATUS(NTAPI* NtWriteVirtualMemory_t)( HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten );
typedef NTSTATUS(NTAPI* NtYieldExecution_t)( VOID );
